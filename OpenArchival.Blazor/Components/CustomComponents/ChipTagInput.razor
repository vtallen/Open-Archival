@using MudBlazor

<div class="d-flex flex-wrap ga-2 align-center">
    @* Loop through and display each tag as a chip *@
    @foreach (var tag in Items)
    {
        <MudChip Color="Color.Primary" OnClose="() => RemoveTag(tag)" T="string">@tag</MudChip>
    }

    @* Text field for adding new tags *@
    <div style="min-width: 150px;">
    @switch (InputType)
    {
        case ChipTagInputType.TextBox:
        {
            <MudTextField T="string"
                          @bind-Value="_newTag"
                          Variant="Variant.Text"
                          @bind-Placeholder="Placeholder"
                          OnKeyDown="HandleKeyDownTextBox"
                          Immediate="true"
                          Style="padding-top: 0;" 
                          @ref=_mudTextField
                          />
                break; 
            } 
        case ChipTagInputType.AutoComplete:
        {
            @if (AutocompleteSearchFunc is not null)
            {
                <MudAutocomplete 
                    @bind-Text="_newTag"
                    @bind-Placeholder="Placeholder"
                    SearchFunc="AutocompleteSearchFunc" 
                    CoerceText=false 
                    CoerceValue=false
                    OnKeyDown="HandleKeyDownTextBox"
                >

                </MudAutocomplete>
            }
            break; 
        }
    }
    </div>
</div>

@code {
    public enum ChipTagInputType
    {
        None,
        TextBox,
        AutoComplete,
        Date
    }

    private string _newTag = "";

    /// <summary>
    /// The list of tags to display and manage.
    /// </summary>
    [Parameter]
    public List<string> Items { get; set; } = new();

    /// <summary>
    /// Required for two-way binding (@bind-Items).
    /// </summary>
    [Parameter]
    public EventCallback<List<string>> ItemsChanged { get; set; }

    [Parameter]
    public EventCallback OnChanged { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = "Add tag...";

    [Parameter]
    public ChipTagInputType InputType { get; set; } = ChipTagInputType.TextBox;

    [Parameter]
    public Func<string, CancellationToken, Task<IEnumerable<string>>>? AutocompleteSearchFunc { get; set; } = null;

    private MudTextField<string>? _mudTextField;

    private MudAutocomplete<string>? _mudAutoComplete;

    /// <summary>
    /// Handles the key press event in the text field.
    /// </summary>
    private async Task HandleKeyDownTextBox(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_newTag))
        {
            // Add the tag if it doesn't already exist
            if (!Items.Contains(_newTag, StringComparer.OrdinalIgnoreCase))
            {
                Items.Add(_newTag);
                await ItemsChanged.InvokeAsync(Items);
                await OnChanged.InvokeAsync();
            }

            // Clear the input field
            _newTag = "";

            if (_mudTextField is not null)
                _mudTextField.Clear();

            if (_mudAutoComplete is not null)
                await _mudAutoComplete.ClearAsync();
        }
    }

    /// <summary>
    /// Removes a tag from the list when the close icon is clicked.
    /// </summary>
    private async Task RemoveTag(string tag)
    {
        Items.Remove(tag);
        await ItemsChanged.InvokeAsync(Items);
        await OnChanged.InvokeAsync();
    }
}