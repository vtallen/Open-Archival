@using Microsoft.EntityFrameworkCore;

@page "/categorieslist"

<MudPaper Class="pa-4 ma-2 rounded" Elevation="3">
    <MudText Typo="Typo.h6">Categories</MudText>
    <MudDivider></MudDivider>
    <MudList T="string">
        @foreach (ArchiveCategory category in _categories)
        {
            <MudListItem Text=@category.Name OnClick="@(() => OnCategoryItemClicked(category))"></MudListItem>
        }
    </MudList>
    @ChildContent
</MudPaper>

@inject IArchiveCategoryProvider CategoryProvider;
@inject ILogger<CategoriesListComponent> Logger;

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    private List<ArchiveCategory> _categories = new();

    [Parameter]
    public EventCallback<ArchiveCategory> ListItemClickedCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var categories = await CategoryProvider.GetAllArchiveCategories();
        if (categories is null)
        {
            Logger.LogError("There were no categories in the database when attempting to load the list of categories.");
            return; 
        }

        _categories.AddRange(categories);
    }

    public async Task RefreshData()
    {
        _categories.Clear();
        var categories = await CategoryProvider.GetAllArchiveCategories();

        if (categories is null)
        {
            Logger.LogError("There were no categories in the database when attempting to load the list of categories.");
            return; 
        }

        _categories.AddRange(categories);
        StateHasChanged(); 
    }

    protected async Task OnCategoryItemClicked(ArchiveCategory category)
    {
        await ListItemClickedCallback.InvokeAsync(category);
    } 
}
